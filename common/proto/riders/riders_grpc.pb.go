// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.2
// source: common/proto/riders/riders.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RiderServiceClient is the client API for RiderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RiderServiceClient interface {
	CreateRider(ctx context.Context, in *CreateRiderPayload, opts ...grpc.CallOption) (*CreateRiderResponse, error)
	GetRiders(ctx context.Context, in *GetRidersRequest, opts ...grpc.CallOption) (*GetRidersResponse, error)
	GetRiderByUserID(ctx context.Context, in *RiderUserID, opts ...grpc.CallOption) (*Rider, error)
	GetRiderByID(ctx context.Context, in *RiderID, opts ...grpc.CallOption) (*Rider, error)
	UpdateRating(ctx context.Context, in *RiderID, opts ...grpc.CallOption) (*ResponseMessage, error)
	UpdateMinAndMaxCharge(ctx context.Context, in *ChargeUpdatePayload, opts ...grpc.CallOption) (*ResponseMessage, error)
	UpdateAvailabilityStatus(ctx context.Context, in *UpdateAvailabiltyStatusPayLoad, opts ...grpc.CallOption) (*ResponseMessage, error)
	UpdateRiderSuccessfulRides(ctx context.Context, in *UpdateRiderSuccessfulRidesRequest, opts ...grpc.CallOption) (*UpdateRiderResponse, error)
}

type riderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRiderServiceClient(cc grpc.ClientConnInterface) RiderServiceClient {
	return &riderServiceClient{cc}
}

func (c *riderServiceClient) CreateRider(ctx context.Context, in *CreateRiderPayload, opts ...grpc.CallOption) (*CreateRiderResponse, error) {
	out := new(CreateRiderResponse)
	err := c.cc.Invoke(ctx, "/proto.RiderService/CreateRider", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) GetRiders(ctx context.Context, in *GetRidersRequest, opts ...grpc.CallOption) (*GetRidersResponse, error) {
	out := new(GetRidersResponse)
	err := c.cc.Invoke(ctx, "/proto.RiderService/GetRiders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) GetRiderByUserID(ctx context.Context, in *RiderUserID, opts ...grpc.CallOption) (*Rider, error) {
	out := new(Rider)
	err := c.cc.Invoke(ctx, "/proto.RiderService/GetRiderByUserID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) GetRiderByID(ctx context.Context, in *RiderID, opts ...grpc.CallOption) (*Rider, error) {
	out := new(Rider)
	err := c.cc.Invoke(ctx, "/proto.RiderService/GetRiderByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) UpdateRating(ctx context.Context, in *RiderID, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/proto.RiderService/UpdateRating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) UpdateMinAndMaxCharge(ctx context.Context, in *ChargeUpdatePayload, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/proto.RiderService/UpdateMinAndMaxCharge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) UpdateAvailabilityStatus(ctx context.Context, in *UpdateAvailabiltyStatusPayLoad, opts ...grpc.CallOption) (*ResponseMessage, error) {
	out := new(ResponseMessage)
	err := c.cc.Invoke(ctx, "/proto.RiderService/UpdateAvailabilityStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *riderServiceClient) UpdateRiderSuccessfulRides(ctx context.Context, in *UpdateRiderSuccessfulRidesRequest, opts ...grpc.CallOption) (*UpdateRiderResponse, error) {
	out := new(UpdateRiderResponse)
	err := c.cc.Invoke(ctx, "/proto.RiderService/UpdateRiderSuccessfulRides", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RiderServiceServer is the server API for RiderService service.
// All implementations must embed UnimplementedRiderServiceServer
// for forward compatibility
type RiderServiceServer interface {
	CreateRider(context.Context, *CreateRiderPayload) (*CreateRiderResponse, error)
	GetRiders(context.Context, *GetRidersRequest) (*GetRidersResponse, error)
	GetRiderByUserID(context.Context, *RiderUserID) (*Rider, error)
	GetRiderByID(context.Context, *RiderID) (*Rider, error)
	UpdateRating(context.Context, *RiderID) (*ResponseMessage, error)
	UpdateMinAndMaxCharge(context.Context, *ChargeUpdatePayload) (*ResponseMessage, error)
	UpdateAvailabilityStatus(context.Context, *UpdateAvailabiltyStatusPayLoad) (*ResponseMessage, error)
	UpdateRiderSuccessfulRides(context.Context, *UpdateRiderSuccessfulRidesRequest) (*UpdateRiderResponse, error)
	mustEmbedUnimplementedRiderServiceServer()
}

// UnimplementedRiderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRiderServiceServer struct {
}

func (UnimplementedRiderServiceServer) CreateRider(context.Context, *CreateRiderPayload) (*CreateRiderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRider not implemented")
}
func (UnimplementedRiderServiceServer) GetRiders(context.Context, *GetRidersRequest) (*GetRidersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiders not implemented")
}
func (UnimplementedRiderServiceServer) GetRiderByUserID(context.Context, *RiderUserID) (*Rider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiderByUserID not implemented")
}
func (UnimplementedRiderServiceServer) GetRiderByID(context.Context, *RiderID) (*Rider, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRiderByID not implemented")
}
func (UnimplementedRiderServiceServer) UpdateRating(context.Context, *RiderID) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRating not implemented")
}
func (UnimplementedRiderServiceServer) UpdateMinAndMaxCharge(context.Context, *ChargeUpdatePayload) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMinAndMaxCharge not implemented")
}
func (UnimplementedRiderServiceServer) UpdateAvailabilityStatus(context.Context, *UpdateAvailabiltyStatusPayLoad) (*ResponseMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAvailabilityStatus not implemented")
}
func (UnimplementedRiderServiceServer) UpdateRiderSuccessfulRides(context.Context, *UpdateRiderSuccessfulRidesRequest) (*UpdateRiderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRiderSuccessfulRides not implemented")
}
func (UnimplementedRiderServiceServer) mustEmbedUnimplementedRiderServiceServer() {}

// UnsafeRiderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RiderServiceServer will
// result in compilation errors.
type UnsafeRiderServiceServer interface {
	mustEmbedUnimplementedRiderServiceServer()
}

func RegisterRiderServiceServer(s grpc.ServiceRegistrar, srv RiderServiceServer) {
	s.RegisterService(&RiderService_ServiceDesc, srv)
}

func _RiderService_CreateRider_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRiderPayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).CreateRider(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RiderService/CreateRider",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).CreateRider(ctx, req.(*CreateRiderPayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_GetRiders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRidersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).GetRiders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RiderService/GetRiders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).GetRiders(ctx, req.(*GetRidersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_GetRiderByUserID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiderUserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).GetRiderByUserID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RiderService/GetRiderByUserID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).GetRiderByUserID(ctx, req.(*RiderUserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_GetRiderByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).GetRiderByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RiderService/GetRiderByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).GetRiderByID(ctx, req.(*RiderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_UpdateRating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RiderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).UpdateRating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RiderService/UpdateRating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).UpdateRating(ctx, req.(*RiderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_UpdateMinAndMaxCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChargeUpdatePayload)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).UpdateMinAndMaxCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RiderService/UpdateMinAndMaxCharge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).UpdateMinAndMaxCharge(ctx, req.(*ChargeUpdatePayload))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_UpdateAvailabilityStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAvailabiltyStatusPayLoad)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).UpdateAvailabilityStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RiderService/UpdateAvailabilityStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).UpdateAvailabilityStatus(ctx, req.(*UpdateAvailabiltyStatusPayLoad))
	}
	return interceptor(ctx, in, info, handler)
}

func _RiderService_UpdateRiderSuccessfulRides_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRiderSuccessfulRidesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RiderServiceServer).UpdateRiderSuccessfulRides(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RiderService/UpdateRiderSuccessfulRides",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RiderServiceServer).UpdateRiderSuccessfulRides(ctx, req.(*UpdateRiderSuccessfulRidesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RiderService_ServiceDesc is the grpc.ServiceDesc for RiderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RiderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RiderService",
	HandlerType: (*RiderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRider",
			Handler:    _RiderService_CreateRider_Handler,
		},
		{
			MethodName: "GetRiders",
			Handler:    _RiderService_GetRiders_Handler,
		},
		{
			MethodName: "GetRiderByUserID",
			Handler:    _RiderService_GetRiderByUserID_Handler,
		},
		{
			MethodName: "GetRiderByID",
			Handler:    _RiderService_GetRiderByID_Handler,
		},
		{
			MethodName: "UpdateRating",
			Handler:    _RiderService_UpdateRating_Handler,
		},
		{
			MethodName: "UpdateMinAndMaxCharge",
			Handler:    _RiderService_UpdateMinAndMaxCharge_Handler,
		},
		{
			MethodName: "UpdateAvailabilityStatus",
			Handler:    _RiderService_UpdateAvailabilityStatus_Handler,
		},
		{
			MethodName: "UpdateRiderSuccessfulRides",
			Handler:    _RiderService_UpdateRiderSuccessfulRides_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/riders/riders.proto",
}
